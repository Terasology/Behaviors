{
selector: [
    {
      guard: { // Implementation of territorial Critter

        // Looks for a Territory Existing
        componentPresent: "Behaviours:Territory", // Needs Component
        values: [
          "N Territory exists"
        ],

        child: {
          selector: [
            {

              //Is the Territory still in Range?
              guard: {
                componentPresent: "Behaviors:TerritoryDistance",
                values: [
                  "V distanceSquared < 25"
                ],

                child: {
                  selector: [
                    {
                      // Checks for an Player in Range
                      guard: {
                        componentPresent: "Behaviours:FindNearbyPlayers", // Only for Players or for Nemesis aswell?
                        values: [
                          "N charactersWithinRange nonEmpty"
                        ],

                        // If there is a Player in Range we get hostile -> Has to be changed for Nemesis?
                        child: {
                          sequence: [
                            set_target_nearby_player,     // Could be for Nemesis aswell?
                            {
                              "lookup": {
                                tree: "Behaviors:hostile"
                              }
                            }
                          ]
                        }
                      }

                    }
                  ]
                }
              }
            },
            //
            { // Back up sequence for when out of territory
              sequence: [
                set_target_territory,
                move_to
              ]
            }
          ]
        }
      }
    },
      // First Guard fo Selector for Territory End.
    {
    guard: { // Implementation of scared Critter

        componentPresent: "Behaviors:FindNearbyNemesis",
        values: ["N nemesisWithinRange nonEmpty"],

        child: {
          sequence: [

            { sleep: {time: 0.1f }},
            "flee_from_nemesis",
               { lookup: {tree: "Behaviors:flee" }}

          ]
        }
      }
    },

      /**
      Here would be Implementation for Base Needs

      ToDO
      For now not implemented
      Hungry, Thirsty, Sleep -> Metal Renagade (Citizens)
      Got Hurt -> Deer behaviour
      */

      //Implementation Start for Aggressive Critter
      {
        guard: {

        //Checking if Critter is Hungry and Prey is around
        componentPresent: "Behaviors:FindNearbyEntity", // Implementation ??? // Could Be Nemesis aswell? Else another Component?
        values: ["H hungerEntity < 25"],

        child: {
          lookup: {tree:  "Behaviours: aggressiveCritter"}
        }
      }
      },

      // Implementation for Friendly Critter
    {
    guard: {

        //Checks if Nearby Player has Item in Hand
        componentPresent: "Behaviours:FindNearbyPlayers",
        values: [
          "N characterWithinRange nonEmpty"
        ],

        child: {
          sequence: [
            check_luring_item_in_use,
            { sleep: {time:  0.1f}},
            followCharacter,
            {lookup:  {tree: "Behaviors:follow"}}
          ]
        }
      }
    }, // Furthest Outside Selector

  // Implementation for Hostile Critter

    {
      lookup: {
        tree: "Behaviors:stray"
      }
    }
  ]
}
